// Universities Data
const universities = [
    {
        name: "ƒê·∫°i h·ªçc B√°ch Khoa TP.HCM",
        shortName: "B√°ch Khoa",
        description: "Tr∆∞·ªùng ƒë·∫°i h·ªçc k·ªπ thu·∫≠t h√†ng ƒë·∫ßu Vi·ªát Nam",
        majors: [
            "C√¥ng ngh·ªá Th√¥ng tin",
            "K·ªπ thu·∫≠t C∆° kh√≠",
            "K·ªπ thu·∫≠t ƒêi·ªán - ƒêi·ªán t·ª≠",
            "K·ªπ thu·∫≠t H√≥a h·ªçc",
            "K·ªπ thu·∫≠t X√¢y d·ª±ng"
        ],
        color: "#3b82f6"
    },
    {
        name: "ƒê·∫°i h·ªçc Khoa H·ªçc X√£ H·ªôi v√† Nh√¢n VƒÉn",
        shortName: "KHXH & NV",
        description: "Tr∆∞·ªùng ƒë·∫°i h·ªçc chuy√™n v·ªÅ khoa h·ªçc x√£ h·ªôi v√† nh√¢n vƒÉn",
        majors: [
            "Ng√¥n ng·ªØ Anh",
            "Tri·∫øt h·ªçc",
            "X√£ h·ªôi h·ªçc",
            "B√°o ch√≠ - Truy·ªÅn th√¥ng",
            "Quan h·ªá Qu·ªëc t·∫ø"
        ],
        color: "#a855f7"
    },
    {
        name: "ƒê·∫°i h·ªçc S∆∞ Ph·∫°m TP.HCM",
        shortName: "S∆∞ Ph·∫°m",
        description: "ƒê√†o t·∫°o gi√°o vi√™n v√† chuy√™n gia gi√°o d·ª•c",
        majors: [
            "S∆∞ ph·∫°m To√°n h·ªçc",
            "S∆∞ ph·∫°m Ng·ªØ vƒÉn",
            "S∆∞ ph·∫°m Ti·∫øng Anh",
            "S∆∞ ph·∫°m L·ªãch s·ª≠",
            "S∆∞ ph·∫°m H√≥a h·ªçc"
        ],
        color: "#10b981"
    },
    {
        name: "ƒê·∫°i h·ªçc Kinh T·∫ø TP.HCM",
        shortName: "UEH",
        description: "Tr∆∞·ªùng ƒë·∫°i h·ªçc kinh t·∫ø h√†ng ƒë·∫ßu mi·ªÅn Nam",
        majors: [
            "Kinh t·∫ø h·ªçc",
            "Qu·∫£n tr·ªã Kinh doanh",
            "T√†i ch√≠nh - Ng√¢n h√†ng",
            "K·∫ø to√°n - Ki·ªÉm to√°n",
            "Marketing"
        ],
        color: "#f59e0b"
    },
    {
        name: "ƒê·∫°i h·ªçc Y D∆∞·ª£c TP.HCM",
        shortName: "Y D∆∞·ª£c",
        description: "ƒê√†o t·∫°o b√°c sƒ© v√† d∆∞·ª£c sƒ© chuy√™n nghi·ªáp",
        majors: [
            "B√°c sƒ© ƒêa khoa",
            "D∆∞·ª£c h·ªçc",
            "ƒêi·ªÅu d∆∞·ª°ng",
            "Y h·ªçc C·ªï truy·ªÅn",
            "K·ªπ thu·∫≠t Y sinh"
        ],
        color: "#ef4444"
    },
    {
        name: "ƒê·∫°i h·ªçc N√¥ng L√¢m TP.HCM",
        shortName: "N√¥ng L√¢m",
        description: "Chuy√™n ng√†nh n√¥ng nghi·ªáp v√† l√¢m nghi·ªáp",
        majors: [
            "N√¥ng h·ªçc",
            "Th√∫ y",
            "L√¢m h·ªçc",
            "C√¥ng ngh·ªá Th·ª±c ph·∫©m",
            "M√¥i tr∆∞·ªùng v√† T√†i nguy√™n"
        ],
        color: "#059669"
    }
];

// Students Data
const students = [
    {
        id: 1,
        name: "Nguy·ªÖn VƒÉn An",
        math: 8.5,
        literature: 7.8,
        english: 9.0,
        physics: 8.2,
        chemistry: 7.5,
        average: 8.2
    },
    {
        id: 2,
        name: "Tr·∫ßn Th·ªã B√¨nh",
        math: 9.2,
        literature: 8.5,
        english: 8.8,
        physics: 9.0,
        chemistry: 8.7,
        average: 8.84
    },
    {
        id: 3,
        name: "L√™ Ho√†ng C∆∞·ªùng",
        math: 7.0,
        literature: 8.0,
        english: 7.5,
        physics: 7.2,
        chemistry: 7.8,
        average: 7.5
    },
    {
        id: 4,
        name: "Ph·∫°m Th·ªã Dung",
        math: 9.5,
        literature: 9.0,
        english: 9.5,
        physics: 9.2,
        chemistry: 9.3,
        average: 9.3
    },
    {
        id: 5,
        name: "V√µ Minh ƒê·ª©c",
        math: 8.0,
        literature: 7.5,
        english: 8.2,
        physics: 8.5,
        chemistry: 8.0,
        average: 8.04
    },
    {
        id: 6,
        name: "Ho√†ng Th·ªã Em",
        math: 6.5,
        literature: 7.0,
        english: 6.8,
        physics: 6.5,
        chemistry: 7.2,
        average: 6.8
    },
    {
        id: 7,
        name: "ƒê·ªó VƒÉn Phong",
        math: 8.8,
        literature: 8.2,
        english: 9.0,
        physics: 8.5,
        chemistry: 8.3,
        average: 8.56
    },
    {
        id: 8,
        name: "B√πi Th·ªã Giang",
        math: 9.0,
        literature: 8.8,
        english: 8.5,
        physics: 8.7,
        chemistry: 9.0,
        average: 8.8
    },
    {
        id: 9,
        name: "Tr∆∞∆°ng VƒÉn H·∫£i",
        math: 7.5,
        literature: 7.8,
        english: 7.0,
        physics: 7.5,
        chemistry: 7.2,
        average: 7.4
    },
    {
        id: 10,
        name: "Phan Th·ªã Hoa",
        math: 8.3,
        literature: 9.0,
        english: 8.7,
        physics: 8.0,
        chemistry: 8.5,
        average: 8.5
    }
];

// Switch tabs
function switchTab(tabName) {
    // Hide all tab contents
    const tabContents = document.querySelectorAll('.tab-content');
    tabContents.forEach(content => {
        content.classList.remove('active');
    });

    // Remove active class from all buttons
    const tabButtons = document.querySelectorAll('.tab-button');
    tabButtons.forEach(button => {
        button.classList.remove('active');
    });

    // Show selected tab content
    document.getElementById(tabName).classList.add('active');

    // Add active class to clicked button
    event.target.classList.add('active');
}

// Get grade color class
function getGradeColorClass(score) {
    if (score >= 9.0) return 'grade-excellent';
    if (score >= 8.0) return 'grade-good';
    if (score >= 7.0) return 'grade-average';
    return 'grade-below';
}

// Get rank
function getRank(average) {
    if (average >= 9.0) return { label: 'Xu·∫•t s·∫Øc', className: 'rank-excellent' };
    if (average >= 8.0) return { label: 'Gi·ªèi', className: 'rank-good' };
    if (average >= 7.0) return { label: 'Kh√°', className: 'rank-average' };
    return { label: 'Trung b√¨nh', className: 'rank-below' };
}

// Render universities
function renderUniversities() {
    const grid = document.getElementById('universitiesGrid');
    
    universities.forEach(university => {
        const card = document.createElement('div');
        card.className = 'university-card';
        
        const majorsList = university.majors.map(major => 
            `<li>${major}</li>`
        ).join('');
        
        card.innerHTML = `
            <div class="university-header">
                <div class="university-icon" style="background-color: ${university.color};">
                    üìö
                </div>
                <span class="badge">${university.shortName}</span>
            </div>
            <h3>${university.name}</h3>
            <p class="university-description">${university.description}</p>
            <p class="majors-title">C√°c ng√†nh ƒë√†o t·∫°o:</p>
            <ul class="majors-list">
                ${majorsList}
            </ul>
        `;
        
        grid.appendChild(card);
    });
}

// Render grades table
function renderGradesTable() {
    const tbody = document.getElementById('gradesTableBody');
    
    students.forEach(student => {
        const rank = getRank(student.average);
        const row = document.createElement('tr');
        
        row.innerHTML = `
            <td>${student.id}</td>
            <td>${student.name}</td>
            <td class="text-center ${getGradeColorClass(student.math)}">${student.math.toFixed(1)}</td>
            <td class="text-center ${getGradeColorClass(student.literature)}">${student.literature.toFixed(1)}</td>
            <td class="text-center ${getGradeColorClass(student.english)}">${student.english.toFixed(1)}</td>
            <td class="text-center ${getGradeColorClass(student.physics)}">${student.physics.toFixed(1)}</td>
            <td class="text-center ${getGradeColorClass(student.chemistry)}">${student.chemistry.toFixed(1)}</td>
            <td class="text-center ${getGradeColorClass(student.average)}">${student.average.toFixed(2)}</td>
            <td class="text-center">
                <span class="rank-badge ${rank.className}">${rank.label}</span>
            </td>
        `;
        
        tbody.appendChild(row);
    });
}

// Render statistics
function renderStatistics() {
    const statsContainer = document.getElementById('statistics');
    
    const excellent = students.filter(s => s.average >= 9.0).length;
    const good = students.filter(s => s.average >= 8.0 && s.average < 9.0).length;
    const average = students.filter(s => s.average >= 7.0 && s.average < 8.0).length;
    const below = students.filter(s => s.average < 7.0).length;
    
    statsContainer.innerHTML = `
        <div class="stat-card excellent">
            <p class="stat-label">Xu·∫•t s·∫Øc</p>
            <p class="stat-value">${excellent} h·ªçc sinh</p>
        </div>
        <div class="stat-card good">
            <p class="stat-label">Gi·ªèi</p>
            <p class="stat-value">${good} h·ªçc sinh</p>
        </div>
        <div class="stat-card average">
            <p class="stat-label">Kh√°</p>
            <p class="stat-value">${average} h·ªçc sinh</p>
        </div>
        <div class="stat-card below">
            <p class="stat-label">Trung b√¨nh</p>
            <p class="stat-value">${below} h·ªçc sinh</p>
        </div>
    `;
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    renderUniversities();
    renderGradesTable();
    renderStatistics();
});
